generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  accountBanks AccountBanks[]
  categories   Categories[]
  transactions Transactions[]
  Transfers    Transfers[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum BankName {
  BANCO_DO_BRASIL
  ITAU
  ITI
  PICPAY
  NUBANK
  BRADESCO
  SANTANDER
  CAIXA
  INTER
  C6
}

model AccountBanks {
  id          String   @id @default(cuid())
  bank        BankName
  description String
  amount      Int

  userId       String
  user         User           @relation(fields: [userId], references: [id])
  Transactions Transactions[]

  @@map("account_banks")
}

enum Type {
  INCOME
  EXPENSE
}

model Categories {
  id    String  @id @default(cuid())
  name  String
  type  Type    @default(EXPENSE)
  color String
  icon  String?

  user         User           @relation(fields: [userId], references: [id])
  userId       String
  Transactions Transactions[]

  @@map("categories")
}

model Transactions {
  id             String   @id @default(cuid())
  date           DateTime
  type           Type     @default(EXPENSE)
  accountBanksId String
  categoryId     String
  description    String?
  value          Int

  bank     AccountBanks @relation(fields: [accountBanksId], references: [id])
  category Categories   @relation(fields: [categoryId], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("transactions")
}

model Transfers {
  id          String   @id @default(cuid())
  date        DateTime
  bankInitial BankName
  bankDestine BankName
  value       Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("transfers")
}
